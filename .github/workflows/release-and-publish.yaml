name: Release and publish

on:
  push:
    branches:
      - "main"

jobs:
  build:
    if: ${{startsWith(github.event.head_commit.message, 'Release *')}}
    runs-on: ubuntu-latest
    steps:
      - name: get version from commit
        env:
          C_MESSAGE: ${{github.event.head_commit.message}}
        # Commit message following structure: "Release *v1.0.3*", "Release *v2.0.0-beta.2"
        run: |
          echo "NEW_VERSION=$(echo $C_MESSAGE | cut -d'*' -f 2)" >> $GITHUB_ENV
      - name: Verify version regex
        if: ${{ contains(env.NEW_VERSION, 'beta') != true }}
        run: |
          [[ ! $NEW_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo "Version '$NEW_VERSION' does not match regex" && exit 1
      - name: Verify beta version regex
        if: ${{ contains(env.NEW_VERSION, 'beta') == true }}
        run: |
          [[ ! $NEW_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$ ]] && echo "Version '$NEW_VERSION' does not match regex" && exit 1
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"
          scope: "@valkyrie-fnd"
          cache: "yarn"

      - name: Install yarn dependencies
        run: yarn

      - name: Build dist
        run: yarn build

      # Use tag latest
      - name: release tag version
        # if: contains($NEW_VERSION, 'beta') != true
        if: ${{ contains(env.NEW_VERSION, 'beta') != true }}
        run: |
          echo "RELEASE_TAG=latest" >> $GITHUB_ENV

      # Use tag beta for pre-release versions
      - name: release tag beta
        if: ${{ contains(env.NEW_VERSION, 'beta') == true }}
        run: |
          echo "RELEASE_TAG=beta" >> $GITHUB_ENV

      # Update changelog unreleased section with new beta version, so github release can get the changelog
      - name: Update changelog
        if: ${{ contains(env.NEW_VERSION, 'beta') == true }}
        uses: superfaceai/release-changelog-action@2
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: release

      # Create release tag
      - name: Create release tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      - id: get-changelog
        name: Get version changelog
        uses: superfaceai/release-changelog-action@v2
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: read

      # Update GitHub release with changelog
      - name: Update GitHub release documentation
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          body: ${{ steps.get-changelog.outputs.changelog }}
          prerelease: ${{ contains(env.NEW_VERSION, 'beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: "**${{ github.actor }}** created a new release: ${{ env.NEW_VERSION }}. <${{github.server_url}}/${{github.repository}}/releases/tag/${{ env.NEW_VERSION }}>"

      # Publish version to public repository
      - name: Publish
        run: npm publish --access public --tag ${{ env.RELEASE_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}
